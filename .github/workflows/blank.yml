{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "51e9f343",
   "metadata": {},
   "source": [
    "# 파이썬\n",
    "## 조금 작아지죠\n",
    "### 제즈는 말이죵~\n",
    "#### 땃따 뚜리두답 두비두밥"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe1c716c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "210f371c",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=1\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4674a488",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"hello world\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cba834ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "display(\"hello\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b180e581",
   "metadata": {},
   "outputs": [],
   "source": [
    "#정수, 실수, 문자열, 논리\n",
    "a = 5\n",
    "pi = 3.14159\n",
    "s1 =\"read\"\n",
    "s2 ='wow'\n",
    "\n",
    "b1 = True\n",
    "b2 = False\n",
    "b2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da12b7f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "s3 = 'a'\n",
    "s4 = \"alert\"\n",
    "s4 = '\"asf\"'\n",
    "print(s4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd18ec2b",
   "metadata": {},
   "source": [
    "# 파이썬 함수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38c23bed",
   "metadata": {},
   "outputs": [],
   "source": [
    "def test():\n",
    "    a=2\n",
    "    b=3\n",
    "    c= a+b\n",
    "    print(c)\n",
    "test()\n",
    "print('함수 밖에 있는 문장')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2c16d5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "995aa93b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def add(a,b):\n",
    "    c = a+b\n",
    "    print(a+b)\n",
    "    return c\n",
    "c = add(1,2)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b1a3369",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('a','b','c','d')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10f4c958",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 4\n",
    "b = 3\n",
    "c = -2\n",
    "print(a,b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19366dc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mymath as my"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "758ea4ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "my.multiply(2,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92262ac7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from mymath import multiply\n",
    "multiply(5,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87787ab4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from mymath import multiply as mul\n",
    "mul(3,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6c0b4b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "in_str = input('두 수(공백으로 구분) 입력:')\n",
    "in_str.split()\n",
    "a = int(in_str[0])\n",
    "b = int(in_str[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35d1fe50",
   "metadata": {},
   "outputs": [],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9db39ef7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mymath as my"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7614ae5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "my.mul(2,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0dbaeea1",
   "metadata": {},
   "outputs": [],
   "source": [
    "my.mul(a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c12db8e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "my.plu(a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8cf2a2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "my.min(a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0b839b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "my.div(a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6862c4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from mymath import *\n",
    "\n",
    "in_str = input('두수 입력')\n",
    "res = in_str.split()\n",
    "a,b =int(res[0]), int(res[1])\n",
    "\n",
    "mul(a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46163255",
   "metadata": {},
   "outputs": [],
   "source": [
    "user_id= input('아이디: ')\n",
    "user_pw = int(input('패스워드: '))\n",
    "\n",
    "if user_id=='scott' and user_pw == 123:\n",
    "    print('로그인 성공')\n",
    "else:\n",
    "    print('로그인 실패')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c8afde4",
   "metadata": {},
   "outputs": [],
   "source": [
    "go = True\n",
    "while go:\n",
    "    user_id= input('아이디: ')\n",
    "    user_pw = int(input('패스워드: '))\n",
    "\n",
    "    if user_id=='scott' and user_pw == 123:\n",
    "        print('로그인 성공')\n",
    "        go = False\n",
    "    else:\n",
    "        print('로그인 실패')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7488b5c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "아이디: sadf\n",
      "패스워드: saf\n",
      "에러\n",
      "4/5 회 남았습니다.\n",
      "아이디: asf\n",
      "패스워드: asf\n",
      "에러\n",
      "3/5 회 남았습니다.\n",
      "아이디: safd\n",
      "패스워드: sadf\n",
      "에러\n",
      "2/5 회 남았습니다.\n",
      "아이디: sadf\n",
      "패스워드: safd\n",
      "에러\n",
      "1/5 회 남았습니다.\n",
      "아이디: sf\n",
      "패스워드: safd\n",
      "에러\n",
      "0/5 회 남았습니다.\n",
      "횟수를 초과했습니다.\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,6):\n",
    "    try:\n",
    "        user_id= input('아이디: ')\n",
    "        user_pw = int(input('패스워드: '))\n",
    "    \n",
    "        if user_id=='scott' and user_pw == 123:\n",
    "            print('로그인 성공')\n",
    "            break\n",
    "        else:\n",
    "            print('로그인 실패')\n",
    "            print('{}/5 회 남았습니다.'.format(5-i))\n",
    "    except:\n",
    "        print('에러')\n",
    "        print('{}/5 회 남았습니다.'.format(5-i))\n",
    "        pass\n",
    "print('횟수를 초과했습니다.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dffb65e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "567\n"
     ]
    }
   ],
   "source": [
    "a = [10,22,33,41,567]\n",
    "b=0\n",
    "for i in a:\n",
    "    b=+i\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e76e066a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "1b312236",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = random.randint(1,6)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "33c5013d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[41, 17, 6, 7, 19, 37, 8, 10, 3, 4, 38, 21, 28, 6, 26, 38, 32, 41, 16, 16, 37, 31, 43, 5]\n",
      "[41, 17, 6, 7, 19, 37, 8, 10, 3, 4, 38, 21, 28, 6, 26, 38, 32, 41, 16, 16, 37, 31, 43, 5]\n",
      "[41, 17, 6, 7, 19, 37, 8, 10, 3, 4, 38, 21, 28, 6, 26, 38, 32, 41, 16, 16, 37, 31, 43, 5]\n",
      "[41, 17, 6, 7, 19, 37, 8, 10, 3, 4, 38, 21, 28, 6, 26, 38, 32, 41, 16, 16, 37, 31, 43, 5]\n"
     ]
    }
   ],
   "source": [
    "grid = []\n",
    "num_list = []\n",
    "for j in range(4):\n",
    "    for i in range(6):\n",
    "        num_list.append(random.randint(1,45))\n",
    "\n",
    "#     print(num_list)\n",
    "    grid.append(num_list)\n",
    "# print(grid)\n",
    "\n",
    "for i in range(4):\n",
    "    print(grid[i])\n",
    "\n",
    "\n",
    "\n",
    "# total = 0\n",
    "# for j in num_list:\n",
    "#     total += j\n",
    "\n",
    "# total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "448ccece",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.7"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str1 = '5.3'\n",
    "str2 = '3.4'\n",
    "\n",
    "n1 = float(str1)\n",
    "n2 = float(str2)\n",
    "\n",
    "n1+n2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "434d7098",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "str1 = '3.14'\n",
    "num = eval(str1)\n",
    "print(type(num))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "6a4e6cf5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eval('3+4')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "82279f8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1+2+3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "7056d7de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11, 40, 40, 36, 40, 35]\n",
      "[11, 35, 36, 40, 40, 40]\n",
      "최솟값:  11\n",
      "최댓값:  40\n"
     ]
    }
   ],
   "source": [
    "num_list = []\n",
    "for i in range(6):\n",
    "    num_list.append(random.randint(1,45))\n",
    "\n",
    "print(num_list)\n",
    "num_list.sort()\n",
    "print(num_list)\n",
    "print('최솟값: ',num_list[0])\n",
    "print('최댓값: ',num_list[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7742df55",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7b1dfe6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d5e373d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c98ce393",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
